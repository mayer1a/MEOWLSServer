name: Deploy to Ubuntu Server, build and run docker

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 1. Checkout repository
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

  # 2. Get Docker container ID
  get_container_id:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Get Docker container ID
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker ps -qf name=${{ secrets.CONTAINER_NAME }}' | tee container_id.txt
          CONTAINER_ID=$(cat container_id.txt)
          echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV

  # 3. Get Docker image ID
  get_image_id:
    runs-on: ubuntu-latest
    needs: get_container_id
    steps:
      - name: Get Docker image ID
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker images -q ${{ secrets.CONTAINER_NAME }}:latest' | tee image_id.txt
          IMAGE_ID=$(cat image_id.txt)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

  # 4. Update code
  update_code:
    runs-on: ubuntu-latest
    needs: get_image_id
    steps:
      - name: Update code
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'cd /root/MEOWLSServer/MEOWLSServer/ && git pull origin main'

  # 5. Build Docker image
  build_docker_image:
    runs-on: ubuntu-latest
    needs: update_code
    steps:
      - name: Build Docker image
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'cd /root/MEOWLSServer/MEOWLSServer/ && docker build -t ${{ secrets.CONTAINER_NAME }} .'

  # 6. Stop and remove old container
  stop_remove_old_container:
    runs-on: ubuntu-latest
    needs: build_docker_image
    if: env.CONTAINER_ID != ''
    steps:
      - name: Stop and remove old container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker container stop ${{ env.CONTAINER_ID }} && docker container rm ${{ env.CONTAINER_ID }}'

  # 7. Remove old image
  remove_old_image:
    runs-on: ubuntu-latest
    needs: stop_remove_old_container
    if: env.IMAGE_ID != ''
    steps:
      - name: Remove old image
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker rmi ${{ env.IMAGE_ID }}'

  # 8. Run new container
  run_new_container:
    runs-on: ubuntu-latest
    needs: remove_old_image
    steps:
      - name: Run new container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} '
            docker run --restart=always \
              --name "${{ secrets.CONTAINER_NAME }}" \
              --network meowls_network \
              -e DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
              -e DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
              -e DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
              -e DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
              -e DADATA_TOKEN="${{ secrets.DADATA_TOKEN }}" \
              -p "${{ secrets.DATABASE_PORT }}" \
              -d "${{ secrets.CONTAINER_NAME }}:latest"'

  # 9. Clean up unused images and containers
  clean_up:
    runs-on: ubuntu-latest
    needs: run_new_container
    steps:
      - name: Clean up unused images and containers
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker system prune -a -f'
