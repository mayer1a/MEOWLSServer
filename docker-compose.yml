# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#

volumes:
  postgres_data:

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DATABASE_HOST:
  DATABASE_NAME:
  DATABASE_USERNAME:
  DATABASE_PASSWORD:
  DATABASE_PORT:

services:
  app:
    image: mayer1a/gbshopserver:latest
    container_name: app
    restart: always
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - postgres
    ports:
      - ':'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
  migrate:
    image: mayer1a/gbshopserver:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - postgres
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
  revert:
    image: mayer1a/gbshopserver:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - postgres
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0
  postgres:
    restart: unless-stopped
    image: mayer1a/gbshoppostgres:16-alpine
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB:
      POSTGRES_PASSWORD:
      POSTGRES_USER:
      POSTGRES_HOST:
    ports:
      - ':'
